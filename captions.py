import youtube_dl


def filter_type_subs(all_types, type="vtt"):
    print(f"Extracting {type} subs")
    required_sub = None
    for sub in all_types:
        if sub['ext'] == type:
            required_sub = sub
            break

    return required_sub


def filter_language_subs(all_subs, language="en"):
    print(f"Extracting {language} subs")
    required_language_subs = None
    for sub in all_subs:
        if sub.startswith(language):
            required_language_subs = all_subs[sub]
            break

    return required_language_subs


def filter_subs(all_subs, language="en", type="vtt"):
    lang_subs = filter_language_subs(all_subs, language=language)
    if lang_subs is None:
        return {"error": True, "message": "Invalid language code or language not available!"}

    format_subs = filter_type_subs(lang_subs, type=type)
    if format_subs is None:
        return {"error": True, "message": "Invalid subtitles format or format not available!"}

    return {"error": False, "caption_url": format_subs['url'], "message": "Subtitles filtered successfully!"}


def get_captions_url(video_url, language="en", type="vtt"):
    ydl_opts = {
        'writeautomaticsub': True,
        'writesubtitles': True,
        'skip_download': True
    }

    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        try:
            info_dict = ydl.extract_info(video_url, download=False)

        except (youtube_dl.utils.DownloadError, youtube_dl.utils.ExtractorError, youtube_dl.utils.PostProcessingError):
            return {"error": True, "message": "Invalid YouTube URL or Video ID"}

        # print(info_dict.keys())
        if 'subtitles' in info_dict and info_dict['subtitles']:
            # The captions or transcript is available
            print("Captions or transcript is available.")
            all_subs = info_dict['subtitles']
            # Save the captions or transcript to a file
        elif 'automatic_captions' in info_dict and info_dict['automatic_captions']:
            # The autogenerated transcript is available
            print("Autogenerated transcript is available.")
            all_subs = info_dict['automatic_captions']
            # Save the autogenerated transcript to a file
        else:
            # No captions or transcript is available
            print("No captions or transcript is available.")
            all_subs = None

    if all_subs:
        filtered_sub_res = filter_subs(
            all_subs=all_subs, language=language, type=type)

        return filtered_sub_res

    # If no subs available
    return {"error": True, "message": "No captions available!"}
